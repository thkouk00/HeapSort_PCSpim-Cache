.data
	# A: .byte 6, 14, 2, 10, 3, 5, 1, 30, 8, 50, 0, -1, -5, 100
	# A:	.byte 110, -77, -57, 67, -34, -34, 17, 119, -92, -57, 83, 21, 89, 11, 19, -118, -11, -4, 98, 126
	# 	.byte -63, 88, 102, 115, 79, -60, 9, 97, -87, -112, -80, 101, 100, -122, 1, -14, -73, 87, 63, 97
	# 	.byte 127, 52, -16, -127, 109, -26, 7, 118, 125, 97, -6, -75, -50, -110, 83, 36, 45, 39, -44, 85
	# 	.byte 53, 50, -88, 117, -109, -101, -50, -34, -48, -60, -110, -92, 20, -32, -9, -38, 78, -127, 20, -94
	# 	.byte 49, -39, -114, 69, -26, -57, -53, 77, 31, 20, 56, -23, -73, -14, 72, 30, 64, 87, -23, -116
	# 	.byte -123, 11, 96, 58, 23, -66, -63, -110, -23, 7, -20, 9, 96, 105, -17, -46, 126, -41, -18, 26
	# 	.byte -3, 90, -9, 34, 94, 116, 0, 94, 55, 113, -29, -128, -50, 83, 55, 18, -79, -119, -7, -118
	# 	.byte -81, -93, -31, 25, -74, -14, 12, -53, 118, 53, -72, 0, 63, -57, -71, -100, -116, -53, 115, 121
	# 	.byte -48, 70, 38, -103, -47, 8, 4, 6, -42, 80, -18, -24, -26, -68, -71, -111, 8, 18, 105, -27
	# 	.byte 44, 123, -90, -38, -92, 85, -36, 57, -26, 91, -64, -71, -104, 37, 32, -93, 71, 4, -11, -123
	# 	.byte 76, -66, -23, -66, 49, 81, 124, -82, 116, 124, -28, 102, 22, 38, -93, -21, 78, 18, 39, -99
	# 	.byte -6, 73, -86, -102, -62, 55, 99, 97, 29, 121, -10, -10, -91, 46, 103, -30, 83, -75, -85, 61
	# 	.byte 30, 8, 25, 35, 61, -15, -62, -59, 12, 85, -95, -80, -32, -83, -76, 86, 103, -9, 117, 15
	# 	.byte -88, -93, 108, 1, -5, 106, -86, -67, -29, 75, -127, 58, 45, -55, -4, -84, 123, -60, 65, -15
	# 	.byte 19, 53, 62, -48, 116, -87, 105, -80, 83, -123, 58, 5, 50, 31, -30, -53, 59, -62, 120, 54
	# 	.byte 75, -39, -69, 39, -109, -92, 66, 31, -106, -49, 43, -80, 102, -29, -116, 78, 24, -46, 93, 118
	# 	.byte -23, -14, -104, -47, 111, -57, 106, 0, -11, -15, 79, 118, -41, -36, 89, 28, 90, 24, 126, 7
	# 	.byte -84, 119, -116, -39, -103, -68, -75, -15, -92, -43, 33, 66, 95, 81, -81, -13, 20, 16, 36, -26
	# 	.byte -23, 124, 64, 37, -19, -118, 127, 11, 6, -117, 1, -68, -80, -124, 77, 42, -38, -86, 43, -77
	# 	.byte 96, 124, 46, 66, -107, 20, 9, -89, -100, 13, 22, 121, -25, 3, -124, -115, 42, 123, -66, -57
	# 	.byte 41, -14, 13, 57, -109, -123, -81, 74, -2, 102, -22, -7, 85, -35, -79, 7, -74, -113, 76, 92
	# 	.byte 116, -103, 88, -110, 88, -106, 112, -44, 42, 121, 45, 2, 93, -9, 123, 54, 105, 74, 23, 39
	# 	.byte 31, 111, 42, -123, -35, 91, -104, -88, -49, 47, -118, 108, -81, 25, -65, -26, -27, 105, 96, 5
	# 	.byte -128, -86, -98, -39, -95, 35, -76, -23, 98, 45, -36, -48, -14, -51, -27, -51, -77, 86, 39, 1
	# 	.byte -33, -58, -64, -124, -34, -26, -65, -51, -73, 40, -17, 13, -60, -24, 28, -57, 79, 98, -97, -11
	# 	.byte 5, 23, -15, 17, -93, -84, 21, -7, -94, -14, 11, -47, -37, -78, -39, -67, -71, -55, 16, -42
	# 	.byte 123, 29, 115, 126, -100, 52, 60, 115, -36, -51, -127, 12, -85, -111, 67, -121, -53, -39, 38, 17
	# 	.byte 113, 84, -53, -32, 112, 74, -72, 45, 95, -44, -2, 41, 47, 26, 54, -103, 65, -51, -52, 111
	# 	.byte 4, 51, 84, -46, 72, 43, 8, -23, 2, -53, 102, -29, -56, -19, -42, 2, -70, 101, -75, -35
	# 	.byte 89, 119, -43, 27, -122, 75, -123, -37, -6, 7, -28, -44, -84, -98, -13, -121, -58, -78, 29, 115
	# 	.byte 46, -35, -88, -102, -65, -81, 60, -109, 120, 81, -127, 57, -114, 72, 84, -54, -6, -84, 61, -57
	# 	.byte 69, 119, 105, 55, 45, 43, 64, -31, -121, 59, 76, -83, -59, -36, -88, 14, -7, 68, -8, -106
	# 	.byte 57, -119, 18, -28, -59, -34, 125, 71, -7, 83, 10, 119, 40, -75, 82, -52, 9, 105, 117, 121
	# 	.byte 89, 40, -23, 12, -7, 80, 39, -76, 105, -10, 33, -84, 106, 58, -107, 39, 113, 73, -64, 102
	# 	.byte -119, 1, -54, 77, 23, 124, -27, -80, 76, -60, 126, -22, 14, 89, -17, -50, 123, 91, 109, -76
	# 	.byte -121, 57, -8, 32, 7, 119, 6, -42, 19, 83, -113, -77, -14, -6, -85, 47, 87, 48, -47, -105
	# 	.byte 103, 101, -77, -4, 48, 54, 11, 85, 73, 92, 22, 49, 14, -54, 53, 60, 48, 16, 21, 29
	# 	.byte 2, -101, 41, -117, 25, -23, 30, -32, -81, -87, -109, 5, 30, 67, -117, 37, 45, 109, 112, -117
	# 	.byte 1, 44, -97, 42, 2, -98, 9, -96, -125, 83, 35, 48, 35, -33, 117, -124, 127, 90, 79, -79
	# 	.byte 63, 63, -89, -113, -121, -9, 39, -50, 56, 71, 60, -25, -77, -19, -9, 79, -9, 10, 82, -53
	# 	.byte 36, -118, -3, -14, -41, 64, 22, -75, -26, -26, 26, -25, -128, -117, 40, -39, -75, -94, 1, 105
	# 	.byte -114, -32, 70, 104, -35, -64, -12, -46, 82, -116, -118, 93, 83, -35, -84, 14, -34, 79, -51, 97
	# 	.byte -79, -46, -26, 113, 99, -120, -52, 38, -96, 45, 51, -64, -66, -75, -112, -60, -13, 25, -49, 29
	# 	.byte -100, 92, -59, 35, -29, -14, 103, -33, -20, 63, 78, -5, -30, 65, -117, 9, -93, 103, 57, 101
	# 	.byte 27, 23, -12, 105, -27, -37, 57, 122, 48, -35, 40, 3, 56, -11, 57, -75, -109, 101, 9, -69
	# 	.byte -113, -94, -103, -127, -8, 54, 40, -43, -53, 83, -28, 20, -111, -64, -106, 33, -85, 57, -19, 59
	# 	.byte 110, 13, 12, 92, -19, -119, 33, 35, 57, 20, 79, 36, 7, 25, -109, -111, 29, 11, 18, -32
	# 	.byte -34, -98, 58, 67, 25, -127, 15, -8, -13, 3, 115, -23, 85, -127, 112, 88, 71, -1, 99, -24
	# 	.byte 94, -95, -119, -63, 48, 125, -53, 88, 5, -108, -93, -84, 38, -47, 48, 0, -62, 115, 104, -92
	# 	.byte 8, 76, -91, 66, 125, -79, -27, 27, 38, -83, 13, 49, -32, 118, 1, 68, 59, 59, -112, 38
	A:	.byte 37, -66, -113, 38, 103, 122, -111, -74, -6, 10, -103, 8, -63, 123, 7, -108, -14, 4, 127, 92
		.byte -90, -9, 69, 28, -97, 52, -80, 103, 110, -94, 42, 96, -73, -47, -11, 110, -50, -96, -38, -5
		.byte 67, -111, -121, -3, 62, -72, 72, 111, 52, -116, 36, -29, -117, 127, -1, 71, 102, -75, -66, 40
		.byte -125, -46, 82, 26, 90, -60, 108, -16, -79, -109, 109, -4, -24, -113, 83, 69, -35, 53, -66, 0
		.byte -55, 110, -35, 40, -98, 1, 17, 87, 18, 99, -105, 85, 2, 21, -70, -109, 88, -64, -91, 104
		.byte 70, -115, -54, 47, -117, 88, 8, 24, -41, -122, 3, -92, -36, 49, -49, 43, 68, 83, 110, 29
		.byte -58, 11, 87, 83, 108, 122, -32, -119, 4, 86, 25, -11, -96, 118, -87, 24, 42, 35, -83, -2
		.byte -21, 32, 103, 34, 9, 122, 103, 86, 34, 59, -103, -41, 110, 106, 21, 26, 41, -2, -33, -34
		.byte 68, 76, 36, -107, 33, -113, 67, 66, -29, -92, 70, -12, 13, 2, -44, -100, -57, -3, 44, -122
		.byte -115, 110, -36, 52, -53, 28, 99, -68, 63, -127, -97, -97, 0, -4, 30, 97, 2, 53, -89, 118
		.byte 37, 52, 99, -50, -47, 127, -61, 38, 51, -112, 57, 114, -35, 86, -123, -66, -69, -68, 39, -16
		.byte -95, 75, -110, 103, -78, -121, 122, -16, -53, -69, 73, 79, -22, -97, -72, -80, -72, -113, -104, -116
		.byte 12, 47, -10, 40, -111, -123, 48, -61, 48, 83, -45, -57, -14, 0, 46, 95, -84, -104, 105, -44
		.byte -19, -115, 59, 23, 33, -25, 10, 4, -18, 2, 14, -26, 56, -21, 104, -82, 124, -68, 51, -88
		.byte -85, -121, -126, -100, 123, 84, 20, 25, 53, -72, 45, -16, -108, 19, 97, 122, 69, -8, -90, 105
		.byte -26, -54, 111, 27, -126, -88, 74, 49, 50, -2, 66, 12, 34, -27, 26, 86, -74, 65, -88, -127
		.byte 78, -90, 14, 34, -106, 43, -37, -35, 98, 17, 12, 32, 0, -45, -50, 37, 16, 60, 31, 32
		.byte -113, -6, 22, 22, -40, -75, -108, 60, 59, 73, 41, -95, 28, -62, -61, -18, -112, 83, -89, -108
		.byte -3, 109, 75, 76, 0, -108, 22, 58, 56, -75, 107, 15, -112, -5, 29, -110, -46, 48, 10, 109
		.byte -21, -42, 95, -77, -87, -103, -86, 51, 79, 63, -51, -24, -103, 108, -25, 6, -72, -27, -19, 33
		.byte -42, 95, 73, 88, -112, -109, -113, -95, 9, -46, -79, 7, -31, -110, -57, 1, 78, 103, 127, -37
		.byte 94, 32, -3, -27, 113, -23, 111, 17, 66, 70, -72, 47, -116, 105, -117, 65, -83, 86, -28, -23
		.byte 74, 109, -121, -83, 92, 39, -45, 65, -46, -20, -28, -96, 30, -63, -65, -101, -7, -107, -36, 106
		.byte -128, 80, -60, -67, -3, 33, 21, -33, -35, -36, -107, -101, -117, -10, -81, 33, -25, 27, -104, -49
		.byte -77, 62, 62, 78, 96, -7, -10, -77, -10, 114, 21, 121, 78, -118, 10, -86, 45, -9, -123, -117
		.byte -121, -23, -89, -62, -69, 4, 117, -78, -60, -14, -82, 64, -21, 118, 100, -23, 75, -17, -18, 0
		.byte -40, -31, -75, 51, -67, 10, 63, -122, 80, 66, -32, -99, -104, -18, 67, 44, -103, 10, 67, 84
		.byte 62, 9, 104, 99, -5, -88, 115, -127, -115, 45, 84, -113, 84, 48, 104, -38, 95, 59, -30, -78
		.byte -97, -94, -106, 10, -97, -61, -94, 35, -105, 74, -124, -92, 0, -39, 44, 6, 21, -3, -122, -118
		.byte -28, -59, -81, -91, -79, -115, -107, -17, 63, 90, -105, 7, 71, -35, 76, 83, 73, 84, 1, 3
		.byte -11, 109, -96, 53, 25, -43, 34, 96, 19, -40, -15, -25, -61, -125, 48, -62, 126, -19, 81, 66
		.byte 59, -107, -106, 27, -41, 58, 96, 50, 33, -19, -39, -31, -20, -90, -110, -110, 110, -33, 15, 103
		.byte 20, -13, 57, 123, 5, 84, 60, -100, -90, 16, 91, -86, 38, -125, 82, 117, 116, 104, 26, -67
		.byte 0, -42, 102, -56, 43, 23, -127, -12, 44, 82, -74, 78, 38, -64, -61, -98, 75, 23, 105, -17
		.byte 54, -90, -31, -6, 80, -19, -42, -18, -72, -19, -68, 111, -126, 70, -80, -115, 28, -115, 123, 44
		.byte 84, -100, -107, 53, 111, 61, 118, -12, 107, 86, 89, 54, 12, 39, 21, 54, 95, -12, 27, 28
		.byte 125, 64, 112, -2, 46, -32, -120, -91, -95, 64, -25, 78, -97, -30, 41, -35, 57, -22, -85, -68
		.byte -122, 103, 116, 16, -84, -17, 47, -128, 44, 79, -119, 13, -63, 110, 65, -36, 71, -50, 119, -86
		.byte 50, -88, 111, -99, -76, 79, 122, -3, 17, -104, -128, -59, 109, 117, 120, 79, 40, 56, 22, -26
		.byte 72, 85, 112, -115, 18, -67, -21, -126, -21, 66, -3, -29, -29, -90, 55, -123, 7, 117, 125, -96
		.byte -54, 79, 86, 122, 91, 42, -10, -43, 42, -3, -95, 84, 122, 33, -91, 47, 1, -97, 49, -3
		.byte -39, 80, 53, 58, 59, 50, -41, -12, -93, 10, 53, 99, 114, -102, 70, -119, -1, -60, 86, 33
		.byte -83, 2, -27, 30, 19, 50, 13, 42, -13, -62, -66, 2, -69, 97, 58, -24, 9, 72, -104, -11
		.byte -103, -94, -55, 69, 45, 82, 26, -101, -57, -83, 99, 126, -6, 119, -121, -41, -117, -15, -113, 9
		.byte 108, 17, -16, -48, -128, -112, -83, -105, -92, -54, -77, -99, 37, -125, 5, 65, -127, -13, -115, -24
		.byte 52, 4, -4, 117, 58, -2, 115, -70, -87, 5, -119, 62, -79, 16, -74, -104, -39, -50, 102, -57
		.byte -83, 3, -52, -50, -29, -91, 82, 95, -82, -44, -81, 51, 127, 48, 47, 72, -13, 65, -71, -116
		.byte 33, -61, 71, -31, -126, 38, -118, -89, -68, 32, -14, 41, 92, 114, 77, -4, -54, -73, -23, -110
		.byte 71, 95, -92, 22, 89, -40, 42, -87, 101, 0, -86, 101, 76, -115, 29, 31, 34, -47, 33, -105
		.byte 22, 43, -4, 15, -6, 49, -64, -16, -74, -68, -12, -58, -68, -29, 78, -107, 122, 117, 1, -120
.text
	.globl __start
__start:
	# li $t1,14
	li $t1, 1000						# number of elements of A				
	li $t0, 0x10010000					# address of A
	div $s1, $t1, 2						# length/2
	mflo $s2							# take div as index

for:
	addi $s2, $s2, -1
	blt $s2, $zero, end
	jal childs
	jal swap
	j for
end:
	j sort

done:
	li $v0,10							
	syscall

sort:
	add $t8, $t0, $t1					
	addi $t8, $t8, -1					# last element's position
	lb $t9, ($t0)						# take first element
	lb $s5, ($t8)						# take last element
	addi $t1, $t1, -1					# reduce array size
	sb $s5, ($t0) 						# store last element as first 
	sb $t9, ($t8)						# store first element as last
	beq $t1, $zero, done  
	#  -heapify-
	# div $s1, $t1, 2						# length/2
	# mflo $s2							# take div as index
	li $s2,0
cont:
	# addi $s2, $s2, -1
	# blt $s2, $zero, sort

	jal childs
	jal swap2
	
	j sort

swap:
	bge $t2, $t1, for					# if left child is out of bounds 

	add $s3, $t0, $s2					# address of A[i]
	lb $s4, ($s3)						# s4 = A[i] temp			
	
	add $t4, $t0, $t2					# address of A[i*2+1]
	lb $t5, ($t4)						# A[i*2+1], left child
	
	bge $t3, $t1, compare_left			# if right child is out of bounds

	add $t6, $t0, $t3					# address of A[i*2+2]
	lb $t7, ($t6)						# A[i*2+2], right child
	
	bgt $t5, $t7, compare_left			# left child > right child
compare_right:							# left child <= right child
	ble $t7, $s4, for
	swap_right:
	sb $t7, ($s3)						# A[i] = A[i*2+2]
 	sb $s4, ($t6)						# A[i*2+2] = s4 where s4 is the A[i] 
swap_ret_right:
 	addiu $sp, $sp, -8
	sw $ra, ($sp)
	sw $s2, 4($sp)

	sub $s2, $t6, $t0
	jal heapify
	j for


swap_left:
	sb $t5, ($s3)						# A[i] = A[i*2+1]
 	sb $s4, ($t4)						# A[i*2+1] = s4 where s4 is the A[i] 
swap_ret_left:
	addiu $sp, $sp, -8
	sw $ra, ($sp)
	sw $s2, 4($sp)

	sub $s2, $t4, $t0
	jal heapify
	j for

heapify:
	jal childs
	bge $t2, $t1, out_of_bounds			# if left child is out of bounds 

	add $s3, $t0, $s2					# address of A[i]
	lb $s4, ($s3)						# s4 = A[i] temp			
	
	add $t4, $t0, $t2					# address of A[i*2+1]
	lb $t5, ($t4)						# A[i*2+1], left child
	
	bge $t3, $t1, compare_left1			# if right child is out of bounds

	add $t6, $t0, $t3					# address of A[i*2+2]
	lb $t7, ($t6)						# A[i*2+2], right child
	
	bgt $t5, $t7, compare_left1			# left child > right child
compare_right1:							# left child <= right child
	bgt $t7, $s4, swap_right			# A[i*2+2] > A[i] 
# out_of_bounds code to reduce jumbs
out_of_bounds:	
	lw $ra, ($sp)
	lw $s2, 4($sp)
	addiu $sp, $sp, 8
	jr $ra

compare_left:
	bgt $t5, $s4, swap_left				# A[i*2+1] > A[i] 
	j for


compare_left1:
	bgt $t5, $s4, swap_left				# A[i*2+1] > A[i] 
# out_of_bounds code to reduce jumbs
	lw $ra, ($sp)
	lw $s2, 4($sp)
	addiu $sp, $sp, 8
	jr $ra


childs:
	sll $t2, $s2, 1						# index * 2 
	sll $t3, $s2, 1						# index * 2 
	addi $t2, $t2, 1					# left child index*2 + 1
	addi $t3, $t3, 2					# right child index*2 + 2
	# sll $s6, $s2, 1
	# addi $t2, $s6, 1					
	# addi $t3, $s6, 2
	
	jr $ra


####################################### - put elements in order - #########################################################
swap2:
	# bge $t2, $t1, cont					# if left child is out of bounds
	bge $t2, $t1, sort					# if left child is out of bounds

	add $s3, $t0, $s2					# address of A[i]
	lb $s4, ($s3)						# s4 = A[i] temp			
	
	add $t4, $t0, $t2					# address of A[i*2+1]
	lb $t5, ($t4)						# A[i*2+1], left child
	
	bge $t3, $t1, compare_left2			# if right child is out of bounds

	add $t6, $t0, $t3					# address of A[i*2+2]
	lb $t7, ($t6)						# A[i*2+2], right child
	
	bgt $t5, $t7, compare_left2			# left child > right child
compare_right2:							# left child <= right child
	# ble $t7, $s4, cont					# A[i*2+2] < A[i] 
	ble $t7, $s4, sort					# A[i*2+2] < A[i] 
swap_right2:
	sb $t7, ($s3)						# A[i] = A[i*2+2]
 	sb $s4, ($t6)						# A[i*2+2] = s4 where s4 is the A[i] 
 	
swap_ret_right2:
	addiu $sp, $sp, -8
	sw $ra, ($sp)
	sw $s2, 4($sp)

	sub $s2, $t6, $t0
	jal heapify2
	j sort

swap_left2:
	sb $t5, ($s3)						# A[i] = A[i*2+1]
 	sb $s4, ($t4)						# A[i*2+1] = s4 where s4 is the A[i] 
 	
swap_ret_left2:
	addiu $sp, $sp, -8
	sw $ra, ($sp)
	sw $s2, 4($sp)

	sub $s2, $t4, $t0
	jal heapify2
	j sort

heapify2:
	jal childs
	bge $t2, $t1, out_of_bounds			# if left child is out of bounds 

	add $s3, $t0, $s2					# address of A[i]
	lb $s4, ($s3)						# s4 = A[i] temp			
	
	add $t4, $t0, $t2					# address of A[i*2+1]
	lb $t5, ($t4)						# A[i*2+1], left child
	
	bge $t3, $t1, compare_left3			# if right child is out of bounds

	add $t6, $t0, $t3					# address of A[i*2+2]
	lb $t7, ($t6)						# A[i*2+2], right child
	
	bgt $t5, $t7, compare_left3			# left child > right child
compare_right3:							# left child <= right child
	bgt $t7, $s4, swap_right2			# A[i*2+2] > A[i] 
# out_of_bounds code to reduce jumbs
	lw $ra, ($sp)
	lw $s2, 4($sp)
	addiu $sp, $sp, 8
	jr $ra


compare_left2:
	bgt $t5, $s4, swap_left2			# A[i*2+1] > A[i] 
	# j cont
	j sort

compare_left3:
	bgt $t5, $s4, swap_left2			# A[i*2+1] > A[i] 
# out_of_bounds code to reduce jumbs
	lw $ra, ($sp)
	lw $s2, 4($sp)
	addiu $sp, $sp, 8
	jr $ra
